{"version":3,"sources":["svg/steering-wheel.png","api/quizQuestions.js","components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Quiz.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","quizQuestions","question","answers","type","content","Question","props","react_default","a","createElement","className","QuestionCount","counter","total","AnswerOption","name","checked","answerType","answer","id","value","disabled","onChange","onAnswerSelected","htmlFor","answerContent","Quiz","react_transition_group","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","key","questionId","components_QuestionCount","questionTotal","components_Question","answerOptions","map","components_AnswerOption","Result","totalScore","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","answersCount","handleAnswerSelected","bind","assertThisInitialized","_this2","shuffledAnswerOptions","shuffleArray","setState","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","event","_this3","setUserAnswer","currentTarget","setTimeout","setNextQuestion","setResults","getResults","objectSpread","defineProperty","valueOfQuesion","answersCountKeys","keys","answersCountValues","maxAnswerCount","max","apply","filter","result","components_Quiz","components_Result","src","logo","alt","renderResult","renderQuiz","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a093e87b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/steering-wheel.d05e8607.png\";","var quizQuestions = [\n  {\n    question: \"Cuando manejas de noche, debes bajar las luces cuando:\",\n    answers: [\n      {\n        type: \"Incorrect\",\n        content: \"Cuando las luces del otro vehiculo estan bajas\",\n      },\n      {\n        type: \"Correct\",\n        content: \"Cuando te encuentras con otro vehiculo\",\n      },\n      {\n        type: \"Incorrect\",\n        content: \"Cuando te acercas a una interseccion\",\n      }\n    ],\n  },\n  {\n    question: \"La ley de manos libres de Georgia le aplica a que de lo siguiente:\",\n    answers: [\n      {\n        type: \"Correct\",\n        content: \"Todos los conductores no importa la edad.\",\n      },\n      {\n        type: \"Incorrect\",\n        content: \"Conductores Ancianos\",\n      },\n      {\n        type: \"Incorrect\",\n        content: \"Conductores menores de 21\",\n      },\n    ],\n  },\n  {\n    question:\n      \"La ley de 'Move-Over' implica que los conductores:\",\n    answers: [\n      {\n        type: \"Correct\",\n        content: \"Moverse al menos una linea alejado de un vehiculo de emergencia que esta estacionado, o si no puede moverse, bajar la velocidad por debajo del limite de velocidad.\",\n      },\n      {\n        type: \"Incorrect\",\n        content: \"Mantenerce en la linea derecha si manejas un tractor o trailer\",\n      },\n      {\n        type: \"Incorrect\",\n        content: \"Quitar vehiculos fuera de las lineas de trafico que siguen un accidente.\",\n      },\n    ],\n  },\n  {\n    question: \"Si te ves envuelta en un accidente, uno de los requerimientos principales es:\",\n    answers: [\n      {\n        type: \"Correct\",\n        content: \"Bridar ayuda a los heridos.\",\n      },\n      {\n        type: \"Incorrect\",\n        content: \"Notificar al setretario de estado.\",\n      },\n      {\n        type: \"Incorrect\",\n        content: \"Notificar a tu corredor de seguros.\",\n      },\n    ],\n  },\n  {\n    question: \"Que deberias hacer cuando ves una senal de trafico amarilla parpadeando en la siguiente interseccion?\",\n    answers: [\n      {\n        type: \"Correct\",\n        content: \"Baja la velocidad y procede con precaucion.\",\n      },\n      {\n        type: \"Incorrect\",\n        content: \"Acelera antes de que la luz cambie a rojo.\",\n      },\n      {\n        type: \"Incorrect\",\n        content: \"detenerse por completo antes de proceder.\",\n      },\n    ],\n  },\n  {\n    question: \"Donde debe ir la persona con licencia cuando la persona con permiso va manejando el vehiculo?\",\n    answers: [\n      {\n        type: \"Correct\",\n        content: \"En el asiento de pasajero del frente.\",\n      },\n      {\n        type: \"Incorrect\",\n        content: \"En el asiento trasero justo atras del conductor.\",\n      },\n      {\n        type: \"Incorrect\",\n        content: \"En cualquier lugar que escoja.\",\n      },\n    ],\n  },\n  {\n    question: \"Vas manejando detras de una motocicleta y te la quieres pasar. Tu debes:\",\n    answers: [\n      {\n        type: \"Correct\",\n        content: \"Tener tu vehiculo completamente en el carril izquierdo antes y durante el pase.\",\n      },\n      {\n        type: \"Incorrect\",\n        content: \"Toca la bocina para que la motocicleta se mueva hacia el hombro del carril para que puedas pasar.\",\n      },\n      {\n        type: \"Incorrect\",\n        content: \"Quedate en la linea derecha el mayor tiempo posible, porque la motocicleta es pequena y no ocupa toda la linea.\",\n      },\n    ],\n  },\n\n];\n\nexport default quizQuestions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Question(props) {\n  return <h2 className=\"question\">{props.content}</h2>;\n}\n\nQuestion.propTypes = {\n  content: PropTypes.string.isRequired\n};\n\nexport default Question;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction QuestionCount(props) {\n  return (\n    <div className=\"questionCount\">\n      Pregunta <span>{props.counter}</span> de <span>{props.total}</span>\n    </div>\n  );\n}\n\nQuestionCount.propTypes = {\n  counter: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired\n};\n\nexport default QuestionCount;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction AnswerOption(props) {\n  return (\n    <li className=\"answerOption\">\n      <input\n        type=\"radio\"\n        className=\"radioCustomButton\"\n        name=\"radioGroup\"\n        checked={props.answerType === props.answer}\n        id={props.answerType}\n        value={props.answerType}\n        disabled={props.answer}\n        onChange={props.onAnswerSelected}\n      />\n      <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\n        {props.answerContent}\n      </label>\n    </li>\n  );\n}\n\nAnswerOption.propTypes = {\n  answerType: PropTypes.string.isRequired,\n  answerContent: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default AnswerOption;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport Question from '../components/Question';\nimport QuestionCount from '../components/QuestionCount';\nimport AnswerOption from '../components/AnswerOption';\n\nfunction Quiz(props) {\n  function renderAnswerOptions(key) {\n    return (\n      <AnswerOption\n        key={key.content}\n        answerContent={key.content}\n        answerType={key.type}\n        answer={props.answer}\n        questionId={props.questionId}\n        onAnswerSelected={props.onAnswerSelected}\n      />\n    );\n  }\n\n  return (\n    <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n      <div key={props.questionId}>\n        <QuestionCount counter={props.questionId} total={props.questionTotal} />\n        <Question content={props.question} />\n        <ul className=\"answerOptions\">\n          {props.answerOptions.map(renderAnswerOptions)}\n        </ul>\n      </div>\n    </CSSTransitionGroup>\n  );\n}\n\nQuiz.propTypes = {\n  answer: PropTypes.string.isRequired,\n  answerOptions: PropTypes.array.isRequired,\n  question: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default Quiz;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nfunction Result(props) {\n  return (\n    <CSSTransitionGroup\n      className=\"container result\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n      <div>\n        Tu puntuacion es <strong>{props.totalScore} / 100 </strong>!\n      </div>\n    </CSSTransitionGroup>\n  );\n}\n\nResult.propTypes = {\n  quizResult: PropTypes.string.isRequired\n};\n\nexport default Result;\n","import React, { Component } from 'react';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\nimport logo from './svg/steering-wheel.png';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {},\n      totalScore: 0,\n    };\n\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n\n  componentDidMount() {\n    const shuffledAnswerOptions = quizQuestions.map(question =>\n      this.shuffleArray(question.answers)\n    );\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    });\n  }\n\n  shuffleArray(array) {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  // handles the click of an option\n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value);\n\n    // if there is a next question\n    if (this.state.questionId < quizQuestions.length) {\n      setTimeout(() => this.setNextQuestion(), 300);\n    } \n    // if there is no next question then calculate result\n    else {\n      setTimeout(() => this.setResults(this.getResults()), 300);\n    }\n  }\n\n  //returns the value of each question to react 100 points\n  valueOfQuesion() {\n    const amountOfquestions = quizQuestions.length;\n\n    return 100 / amountOfquestions;\n  }\n\n  setUserAnswer(answer) {\n    this.setState((state, props) => ({\n      answersCount: {\n        ...state.answersCount,\n        [answer]: (state.answersCount[answer] || 0) + 1\n      },\n      answer: answer\n    }));\n\n    if(answer === 'Correct') {\n      this.setState({totalScore: this.state.totalScore + this.valueOfQuesion()})\n    }\n  }\n\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: ''\n    });\n  }\n\n  getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);\n    const answersCountValues = answersCountKeys.map(key => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\n\n    return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\n  }\n\n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({ result: result[0] });\n    } else {\n      this.setState({ result: 'Undetermined' });\n    }\n  }\n\n  renderQuiz() {\n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        onAnswerSelected={this.handleAnswerSelected}\n      />\n    );\n  }\n\n  renderResult() {\n    return <Result totalScore={this.state.totalScore}/>;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>Practica para el examen de manejo de Georgia</h2>\n        </div>\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}